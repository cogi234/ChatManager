@model IEnumerable<ChatManager.Models.Connection>

@if (Model.Count() > 0)
{
    DateTime currentDay = DateTime.MaxValue;

    HashSet<int> alreadyUsedConnectedUsers = new HashSet<int>();

    foreach (var item in Model)
    {
        if (item.StartDate.Date != currentDay)
        {
            currentDay = item.StartDate.Date;
            <hr />
            <div>@currentDay.ToShortDateString() <span class="icon fa fa-window-close day-display" title="Supprimer cette journée" day="@currentDay.ToString()"></span></div>
            <hr />
        }

        var user = ChatManager.Models.DB.Users.Get(item.UserId);

        if (item.EndDate == DateTime.MinValue)
        {
            if (ChatManager.Models.OnlineUsers.IsOnLine(item.UserId) && !alreadyUsedConnectedUsers.Contains(item.UserId))
            {
                alreadyUsedConnectedUsers.Add(item.UserId);
                <div class="connectionContainer">
                    @Helper.AvatarUser(user, "UserSmallAvatar")
                    <div></div>
                    <div>
                        @item.StartDate.ToShortTimeString() : <img class="small_icon" src=/Content/UI-Icons/OnLine.png>
                    </div>
                </div>
            }
            else
            {
                <div class="connectionContainer">
                    @Helper.AvatarUser(user, "UserSmallAvatar")
                    <div></div>
                    <div>
                        @item.StartDate.ToShortTimeString() : <img class="small_icon" src=/Content/UI-Icons/timeout.png>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="connectionContainer">
                @Helper.AvatarUser(user, "UserSmallAvatar")
                <div></div>
                <div>
                    @item.StartDate.ToShortTimeString() : @item.EndDate.ToShortTimeString()
                </div>
            </div>
        }

    }
}
else
{
    <div></div>
}